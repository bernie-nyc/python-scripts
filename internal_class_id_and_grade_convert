import pandas as pd
from difflib import get_close_matches
from fuzzywuzzy import fuzz

def normalize_class_id(class_id):
    """Normalize class IDs, expanding abbreviations like 'RD' to 'READ'."""
    if pd.isna(class_id):
        return ""
    normalized = class_id.strip().upper()
    normalized = normalized.replace(" RD", " READ")  # Replace ' RD' with ' READ'
    return normalized

def match_internal_class_id(template_df, classes_df):
    """Match the Internal Class ID using fuzzy logic on class IDs."""
    # Normalize columns
    template_df['class_id_normalized'] = template_df['class_id'].apply(normalize_class_id)
    classes_df['Class ID Normalized'] = classes_df['Class ID'].apply(normalize_class_id)
    
    # Combine fields in the classes DataFrame for matching
    classes_df['Search Field'] = (
        classes_df['Class ID Normalized'] + " " +
        classes_df['Course'].str.strip().str.upper() + " " +
        classes_df['Description'].str.strip().str.upper()
    )

    # Create a mapping of class_id to internal class id
    internal_id_mapping = {}
    for class_id in template_df['class_id_normalized'].unique():
        best_match = process.extractOne(
            class_id, classes_df['Search Field'], scorer=fuzz.token_sort_ratio
        )
        if best_match:
            matched_string = best_match[0]
            matched_row = classes_df[classes_df['Search Field'] == matched_string].iloc[0]
            internal_id_mapping[class_id] = matched_row['Internal Class ID']

    # Map the matched internal class IDs back to the template
    template_df['Internal Class ID'] = template_df['class_id_normalized'].map(internal_id_mapping)
    
    return template_df

def replace_grade_values(template_df):
    """Replace grade letter values with stored values."""
    # Static grade conversion data
    grade_mapping = {
        "E": "94",
        "G": "83",
        "S": "75",
        "N": "60",
        "F": "59",
        "A": "100",
        "B": "89",
        "C": "79",
        "D": "69"
    }
    
    # Replace grade values
    template_df['final_grades'] = template_df['posted_grade'].map(grade_mapping)
    
    return template_df

def process_template(template_file, classes_file, output_file):
    """Process the template CSV file to match internal class IDs and replace grades."""
    # Load files
    template_df = pd.read_csv(template_file, dtype=str)
    classes_df = pd.read_csv(classes_file, dtype=str)

    # Match internal class IDs
    template_df = match_internal_class_id(template_df, classes_df)

    # Replace grade values
    template_df = replace_grade_values(template_df)

    # Save the updated template
    template_df.to_csv(output_file, index=False)
    print(f"Processed template saved to {output_file}")

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Process a template CSV file to match internal class IDs and replace grades.")
    parser.add_argument("--template", required=True, help="Path to the template CSV file.")
    parser.add_argument("--classes", required=True, help="Path to the classes CSV file.")
    parser.add_argument("--output", required=True, help="Path to save the processed CSV file.")

    args = parser.parse_args()

    process_template(args.template, args.classes, args.output)
