import pandas as pd
from difflib import get_close_matches
import argparse

def find_closest_class_id(template_class_id, classes_df):
    """Find the closest matching Class ID in the classes DataFrame."""
    # Normalize the template class ID
    template_class_id = str(template_class_id).strip().upper()
    
    # Normalize the Class IDs in the classes file
    classes_df['Class ID Normalized'] = classes_df['Class ID'].astype(str).str.strip().str.upper()
    
    # Find closest match
    possible_matches = classes_df['Class ID Normalized'].tolist()
    closest_matches = get_close_matches(template_class_id, possible_matches, n=1, cutoff=0.6)

    if closest_matches:
        matched_class_id = closest_matches[0]
        matched_row = classes_df[classes_df['Class ID Normalized'] == matched_class_id].iloc[0]
        return matched_row['Internal Class ID']
    else:
        return None

def process_files(classes_file, template_file, output_file):
    """Process the classes and template files to populate the Internal Class ID."""
    # Load CSV files
    classes_df = pd.read_csv(classes_file, dtype=str)
    template_df = pd.read_csv(template_file, dtype=str)

    # Apply the matching logic
    template_df['Internal Class ID'] = template_df['class_id'].apply(
        lambda x: find_closest_class_id(x, classes_df)
    )

    # Save the updated template to the output file
    template_df.to_csv(output_file, index=False)
    print(f"Processed file saved to {output_file}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Match and populate Internal Class IDs in a template file.")
    parser.add_argument("--classes", required=True, help="Path to the classes CSV file.")
    parser.add_argument("--template", required=True, help="Path to the template CSV file.")
    parser.add_argument("--output", required=True, help="Path to save the updated template CSV file.")

    args = parser.parse_args()

    process_files(args.classes, args.template, args.output)
